/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* start := comment=Comment _ $
* Comment := WhileComment | ManipulationComment | SetComment | IfComment | Expression
* _ := ' '*
* WhileComment := 'while' _ whileExpression=Expression ':'
* ManipulationComment := ManipulationCommentBase
* ManipulationCommentBase := ManipulationCommentSwap | ManipulationCommentMove | ManipulationCommentRotate
* ManipulationCommentSwap := 'swap' _ target=CommentSelector
* ManipulationCommentMove := 'move' _ target=CommentSelector _ nav=Navigations
* ManipulationCommentRotate := 'rotate' _ target=CommentSelector _ rotateDir={'downwards' | 'upwards'}
* SetComment := 'set ' _ target=CommentSelector  _ 'to' _ value=Expression
* Navigations := _ navigations={ distance='[0-9]+' _ dir={'up' | 'down' | 'left' | 'right'} _ }* 
* CommentSelector := '{' _ 'get' _ countSelector={sth='comment' | count='[0-9]+' _ 'comments' _ aboveBelow={'above' | 'below'}} _ navigations=Navigations _ '}'
* IfComment := 'if' _ condition=Expression _ ':'
* VarName := '[a-zA-Z]+[0-9a-zA-Z]*'
* Expression := LogicalExpression
* LogicalExpression := EqualsExpression | NotEqualsExpression | ComparisionExpression
* EqualsExpression := lhs=LogicalExpression _ '==' _ rhs=ComparisionExpression
* NotEqualsExpression := lhs=LogicalExpression _ '!=' _ rhs=ComparisionExpression
* ComparisionExpression := LessThanExpression | MoreThanExpression | LessEqualExpression | MoreEqualExpression | LineExpression
* LessThanExpression := lhs=ComparisionExpression _ '<' _ rhs=LineExpression
* MoreThanExpression := lhs=ComparisionExpression _ '>' _ rhs=LineExpression
* LessEqualExpression := lhs=ComparisionExpression _ '<=' _ rhs=LineExpression
* MoreEqualExpression := lhs=ComparisionExpression _ '>=' _ rhs=LineExpression
* LineExpression := AddExpression | SubExpression | DotExpression
* AddExpression :=  lhs=LineExpression _ '\+' _ rhs=DotExpression
* SubExpression :=  lhs=LineExpression _ '\-' _ rhs=DotExpression
* DotExpression := MulExpression | DivExpression | PrefixExpression
* MulExpression := lhs=DotExpression _ '\*' _ rhs=PrefixExpression
* DivExpression := lhs=DotExpression _ '\/' _ rhs=PrefixExpression
* PrefixExpression := EvalExpression | PostfixExpression
* EvalExpression := '\$' _ toEval=PostfixExpression
* PostfixExpression := FunctionCall | GetLengthExpression | IndexExpression | AtomicExpression
* FunctionParameters := value=Expression _ next={',' _ nextParam=FunctionParameters}?
* FunctionCall := funcName=AtomicExpression _ '\(' _ params=FunctionParameters? _ '\)'
* GetLengthExpression := list=AtomicExpression _ '.length'
* IndexExpression := list=AtomicExpression _ '\[' _ index=Expression _ '\]'
* AtomicExpression := value='true' 
*     | value='false' 
*     | varName=VarName 
*     | num='[0-9]+' 
*     | '\(' sub=Expression '\)' 
*     | '\[' listParams=FunctionParameters? '\]' 
*     | CommentSelector 
*     | '\'' str={!'\'' char='.'}* '\''
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    Comment_1 = "Comment_1",
    Comment_2 = "Comment_2",
    Comment_3 = "Comment_3",
    Comment_4 = "Comment_4",
    Comment_5 = "Comment_5",
    _ = "_",
    WhileComment = "WhileComment",
    ManipulationComment = "ManipulationComment",
    ManipulationCommentBase_1 = "ManipulationCommentBase_1",
    ManipulationCommentBase_2 = "ManipulationCommentBase_2",
    ManipulationCommentBase_3 = "ManipulationCommentBase_3",
    ManipulationCommentSwap = "ManipulationCommentSwap",
    ManipulationCommentMove = "ManipulationCommentMove",
    ManipulationCommentRotate = "ManipulationCommentRotate",
    ManipulationCommentRotate_$0_1 = "ManipulationCommentRotate_$0_1",
    ManipulationCommentRotate_$0_2 = "ManipulationCommentRotate_$0_2",
    SetComment = "SetComment",
    Navigations = "Navigations",
    Navigations_$0 = "Navigations_$0",
    Navigations_$0_$0_1 = "Navigations_$0_$0_1",
    Navigations_$0_$0_2 = "Navigations_$0_$0_2",
    Navigations_$0_$0_3 = "Navigations_$0_$0_3",
    Navigations_$0_$0_4 = "Navigations_$0_$0_4",
    CommentSelector = "CommentSelector",
    CommentSelector_$0_1 = "CommentSelector_$0_1",
    CommentSelector_$0_2 = "CommentSelector_$0_2",
    CommentSelector_$0_$0_1 = "CommentSelector_$0_$0_1",
    CommentSelector_$0_$0_2 = "CommentSelector_$0_$0_2",
    IfComment = "IfComment",
    VarName = "VarName",
    Expression = "Expression",
    LogicalExpression_1 = "LogicalExpression_1",
    LogicalExpression_2 = "LogicalExpression_2",
    LogicalExpression_3 = "LogicalExpression_3",
    EqualsExpression = "EqualsExpression",
    NotEqualsExpression = "NotEqualsExpression",
    ComparisionExpression_1 = "ComparisionExpression_1",
    ComparisionExpression_2 = "ComparisionExpression_2",
    ComparisionExpression_3 = "ComparisionExpression_3",
    ComparisionExpression_4 = "ComparisionExpression_4",
    ComparisionExpression_5 = "ComparisionExpression_5",
    LessThanExpression = "LessThanExpression",
    MoreThanExpression = "MoreThanExpression",
    LessEqualExpression = "LessEqualExpression",
    MoreEqualExpression = "MoreEqualExpression",
    LineExpression_1 = "LineExpression_1",
    LineExpression_2 = "LineExpression_2",
    LineExpression_3 = "LineExpression_3",
    AddExpression = "AddExpression",
    SubExpression = "SubExpression",
    DotExpression_1 = "DotExpression_1",
    DotExpression_2 = "DotExpression_2",
    DotExpression_3 = "DotExpression_3",
    MulExpression = "MulExpression",
    DivExpression = "DivExpression",
    PrefixExpression_1 = "PrefixExpression_1",
    PrefixExpression_2 = "PrefixExpression_2",
    EvalExpression = "EvalExpression",
    PostfixExpression_1 = "PostfixExpression_1",
    PostfixExpression_2 = "PostfixExpression_2",
    PostfixExpression_3 = "PostfixExpression_3",
    PostfixExpression_4 = "PostfixExpression_4",
    FunctionParameters = "FunctionParameters",
    FunctionParameters_$0 = "FunctionParameters_$0",
    FunctionCall = "FunctionCall",
    GetLengthExpression = "GetLengthExpression",
    IndexExpression = "IndexExpression",
    AtomicExpression_1 = "AtomicExpression_1",
    AtomicExpression_2 = "AtomicExpression_2",
    AtomicExpression_3 = "AtomicExpression_3",
    AtomicExpression_4 = "AtomicExpression_4",
    AtomicExpression_5 = "AtomicExpression_5",
    AtomicExpression_6 = "AtomicExpression_6",
    AtomicExpression_7 = "AtomicExpression_7",
    AtomicExpression_8 = "AtomicExpression_8",
    AtomicExpression_$0 = "AtomicExpression_$0",
    $EOF = "$EOF",
}
export interface start {
    kind: ASTKinds.start;
    comment: Comment;
}
export type Comment = Comment_1 | Comment_2 | Comment_3 | Comment_4 | Comment_5;
export type Comment_1 = WhileComment;
export type Comment_2 = ManipulationComment;
export type Comment_3 = SetComment;
export type Comment_4 = IfComment;
export type Comment_5 = Expression;
export type _ = string[];
export interface WhileComment {
    kind: ASTKinds.WhileComment;
    whileExpression: Expression;
}
export type ManipulationComment = ManipulationCommentBase;
export type ManipulationCommentBase = ManipulationCommentBase_1 | ManipulationCommentBase_2 | ManipulationCommentBase_3;
export type ManipulationCommentBase_1 = ManipulationCommentSwap;
export type ManipulationCommentBase_2 = ManipulationCommentMove;
export type ManipulationCommentBase_3 = ManipulationCommentRotate;
export interface ManipulationCommentSwap {
    kind: ASTKinds.ManipulationCommentSwap;
    target: CommentSelector;
}
export interface ManipulationCommentMove {
    kind: ASTKinds.ManipulationCommentMove;
    target: CommentSelector;
    nav: Navigations;
}
export interface ManipulationCommentRotate {
    kind: ASTKinds.ManipulationCommentRotate;
    target: CommentSelector;
    rotateDir: ManipulationCommentRotate_$0;
}
export type ManipulationCommentRotate_$0 = ManipulationCommentRotate_$0_1 | ManipulationCommentRotate_$0_2;
export type ManipulationCommentRotate_$0_1 = string;
export type ManipulationCommentRotate_$0_2 = string;
export interface SetComment {
    kind: ASTKinds.SetComment;
    target: CommentSelector;
    value: Expression;
}
export interface Navigations {
    kind: ASTKinds.Navigations;
    navigations: Navigations_$0[];
}
export interface Navigations_$0 {
    kind: ASTKinds.Navigations_$0;
    distance: string;
    dir: Navigations_$0_$0;
}
export type Navigations_$0_$0 = Navigations_$0_$0_1 | Navigations_$0_$0_2 | Navigations_$0_$0_3 | Navigations_$0_$0_4;
export type Navigations_$0_$0_1 = string;
export type Navigations_$0_$0_2 = string;
export type Navigations_$0_$0_3 = string;
export type Navigations_$0_$0_4 = string;
export interface CommentSelector {
    kind: ASTKinds.CommentSelector;
    countSelector: CommentSelector_$0;
    navigations: Navigations;
}
export type CommentSelector_$0 = CommentSelector_$0_1 | CommentSelector_$0_2;
export interface CommentSelector_$0_1 {
    kind: ASTKinds.CommentSelector_$0_1;
    sth: string;
}
export interface CommentSelector_$0_2 {
    kind: ASTKinds.CommentSelector_$0_2;
    count: string;
    aboveBelow: CommentSelector_$0_$0;
}
export type CommentSelector_$0_$0 = CommentSelector_$0_$0_1 | CommentSelector_$0_$0_2;
export type CommentSelector_$0_$0_1 = string;
export type CommentSelector_$0_$0_2 = string;
export interface IfComment {
    kind: ASTKinds.IfComment;
    condition: Expression;
}
export type VarName = string;
export type Expression = LogicalExpression;
export type LogicalExpression = LogicalExpression_1 | LogicalExpression_2 | LogicalExpression_3;
export type LogicalExpression_1 = EqualsExpression;
export type LogicalExpression_2 = NotEqualsExpression;
export type LogicalExpression_3 = ComparisionExpression;
export interface EqualsExpression {
    kind: ASTKinds.EqualsExpression;
    lhs: LogicalExpression;
    rhs: ComparisionExpression;
}
export interface NotEqualsExpression {
    kind: ASTKinds.NotEqualsExpression;
    lhs: LogicalExpression;
    rhs: ComparisionExpression;
}
export type ComparisionExpression = ComparisionExpression_1 | ComparisionExpression_2 | ComparisionExpression_3 | ComparisionExpression_4 | ComparisionExpression_5;
export type ComparisionExpression_1 = LessThanExpression;
export type ComparisionExpression_2 = MoreThanExpression;
export type ComparisionExpression_3 = LessEqualExpression;
export type ComparisionExpression_4 = MoreEqualExpression;
export type ComparisionExpression_5 = LineExpression;
export interface LessThanExpression {
    kind: ASTKinds.LessThanExpression;
    lhs: ComparisionExpression;
    rhs: LineExpression;
}
export interface MoreThanExpression {
    kind: ASTKinds.MoreThanExpression;
    lhs: ComparisionExpression;
    rhs: LineExpression;
}
export interface LessEqualExpression {
    kind: ASTKinds.LessEqualExpression;
    lhs: ComparisionExpression;
    rhs: LineExpression;
}
export interface MoreEqualExpression {
    kind: ASTKinds.MoreEqualExpression;
    lhs: ComparisionExpression;
    rhs: LineExpression;
}
export type LineExpression = LineExpression_1 | LineExpression_2 | LineExpression_3;
export type LineExpression_1 = AddExpression;
export type LineExpression_2 = SubExpression;
export type LineExpression_3 = DotExpression;
export interface AddExpression {
    kind: ASTKinds.AddExpression;
    lhs: LineExpression;
    rhs: DotExpression;
}
export interface SubExpression {
    kind: ASTKinds.SubExpression;
    lhs: LineExpression;
    rhs: DotExpression;
}
export type DotExpression = DotExpression_1 | DotExpression_2 | DotExpression_3;
export type DotExpression_1 = MulExpression;
export type DotExpression_2 = DivExpression;
export type DotExpression_3 = PrefixExpression;
export interface MulExpression {
    kind: ASTKinds.MulExpression;
    lhs: DotExpression;
    rhs: PrefixExpression;
}
export interface DivExpression {
    kind: ASTKinds.DivExpression;
    lhs: DotExpression;
    rhs: PrefixExpression;
}
export type PrefixExpression = PrefixExpression_1 | PrefixExpression_2;
export type PrefixExpression_1 = EvalExpression;
export type PrefixExpression_2 = PostfixExpression;
export interface EvalExpression {
    kind: ASTKinds.EvalExpression;
    toEval: PostfixExpression;
}
export type PostfixExpression = PostfixExpression_1 | PostfixExpression_2 | PostfixExpression_3 | PostfixExpression_4;
export type PostfixExpression_1 = FunctionCall;
export type PostfixExpression_2 = GetLengthExpression;
export type PostfixExpression_3 = IndexExpression;
export type PostfixExpression_4 = AtomicExpression;
export interface FunctionParameters {
    kind: ASTKinds.FunctionParameters;
    value: Expression;
    next: Nullable<FunctionParameters_$0>;
}
export interface FunctionParameters_$0 {
    kind: ASTKinds.FunctionParameters_$0;
    nextParam: FunctionParameters;
}
export interface FunctionCall {
    kind: ASTKinds.FunctionCall;
    funcName: AtomicExpression;
    params: Nullable<FunctionParameters>;
}
export interface GetLengthExpression {
    kind: ASTKinds.GetLengthExpression;
    list: AtomicExpression;
}
export interface IndexExpression {
    kind: ASTKinds.IndexExpression;
    list: AtomicExpression;
    index: Expression;
}
export type AtomicExpression = AtomicExpression_1 | AtomicExpression_2 | AtomicExpression_3 | AtomicExpression_4 | AtomicExpression_5 | AtomicExpression_6 | AtomicExpression_7 | AtomicExpression_8;
export interface AtomicExpression_1 {
    kind: ASTKinds.AtomicExpression_1;
    value: string;
}
export interface AtomicExpression_2 {
    kind: ASTKinds.AtomicExpression_2;
    value: string;
}
export interface AtomicExpression_3 {
    kind: ASTKinds.AtomicExpression_3;
    varName: VarName;
}
export interface AtomicExpression_4 {
    kind: ASTKinds.AtomicExpression_4;
    num: string;
}
export interface AtomicExpression_5 {
    kind: ASTKinds.AtomicExpression_5;
    sub: Expression;
}
export interface AtomicExpression_6 {
    kind: ASTKinds.AtomicExpression_6;
    listParams: Nullable<FunctionParameters>;
}
export type AtomicExpression_7 = CommentSelector;
export interface AtomicExpression_8 {
    kind: ASTKinds.AtomicExpression_8;
    str: AtomicExpression_$0[];
}
export interface AtomicExpression_$0 {
    kind: ASTKinds.AtomicExpression_$0;
    char: string;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$LogicalExpression$memo.clear();
        this.$scope$ComparisionExpression$memo.clear();
        this.$scope$LineExpression$memo.clear();
        this.$scope$DotExpression$memo.clear();
    }
    protected $scope$LogicalExpression$memo: Map<number, [Nullable<LogicalExpression>, PosInfo]> = new Map();
    protected $scope$ComparisionExpression$memo: Map<number, [Nullable<ComparisionExpression>, PosInfo]> = new Map();
    protected $scope$LineExpression$memo: Map<number, [Nullable<LineExpression>, PosInfo]> = new Map();
    protected $scope$DotExpression$memo: Map<number, [Nullable<DotExpression>, PosInfo]> = new Map();
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$comment: Nullable<Comment>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$comment = this.matchComment($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.start, comment: $scope$comment};
                }
                return $$res;
            });
    }
    public matchComment($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment> {
        return this.choice<Comment>([
            () => this.matchComment_1($$dpth + 1, $$cr),
            () => this.matchComment_2($$dpth + 1, $$cr),
            () => this.matchComment_3($$dpth + 1, $$cr),
            () => this.matchComment_4($$dpth + 1, $$cr),
            () => this.matchComment_5($$dpth + 1, $$cr),
        ]);
    }
    public matchComment_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_1> {
        return this.matchWhileComment($$dpth + 1, $$cr);
    }
    public matchComment_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_2> {
        return this.matchManipulationComment($$dpth + 1, $$cr);
    }
    public matchComment_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_3> {
        return this.matchSetComment($$dpth + 1, $$cr);
    }
    public matchComment_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_4> {
        return this.matchIfComment($$dpth + 1, $$cr);
    }
    public matchComment_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_5> {
        return this.matchExpression($$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.loop<string>(() => this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr), true);
    }
    public matchWhileComment($$dpth: number, $$cr?: ErrorTracker): Nullable<WhileComment> {
        return this.run<WhileComment>($$dpth,
            () => {
                let $scope$whileExpression: Nullable<Expression>;
                let $$res: Nullable<WhileComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$whileExpression = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.WhileComment, whileExpression: $scope$whileExpression};
                }
                return $$res;
            });
    }
    public matchManipulationComment($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationComment> {
        return this.matchManipulationCommentBase($$dpth + 1, $$cr);
    }
    public matchManipulationCommentBase($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentBase> {
        return this.choice<ManipulationCommentBase>([
            () => this.matchManipulationCommentBase_1($$dpth + 1, $$cr),
            () => this.matchManipulationCommentBase_2($$dpth + 1, $$cr),
            () => this.matchManipulationCommentBase_3($$dpth + 1, $$cr),
        ]);
    }
    public matchManipulationCommentBase_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentBase_1> {
        return this.matchManipulationCommentSwap($$dpth + 1, $$cr);
    }
    public matchManipulationCommentBase_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentBase_2> {
        return this.matchManipulationCommentMove($$dpth + 1, $$cr);
    }
    public matchManipulationCommentBase_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentBase_3> {
        return this.matchManipulationCommentRotate($$dpth + 1, $$cr);
    }
    public matchManipulationCommentSwap($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentSwap> {
        return this.run<ManipulationCommentSwap>($$dpth,
            () => {
                let $scope$target: Nullable<CommentSelector>;
                let $$res: Nullable<ManipulationCommentSwap> = null;
                if (true
                    && this.regexAccept(String.raw`(?:swap)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$target = this.matchCommentSelector($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ManipulationCommentSwap, target: $scope$target};
                }
                return $$res;
            });
    }
    public matchManipulationCommentMove($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentMove> {
        return this.run<ManipulationCommentMove>($$dpth,
            () => {
                let $scope$target: Nullable<CommentSelector>;
                let $scope$nav: Nullable<Navigations>;
                let $$res: Nullable<ManipulationCommentMove> = null;
                if (true
                    && this.regexAccept(String.raw`(?:move)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$target = this.matchCommentSelector($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$nav = this.matchNavigations($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ManipulationCommentMove, target: $scope$target, nav: $scope$nav};
                }
                return $$res;
            });
    }
    public matchManipulationCommentRotate($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentRotate> {
        return this.run<ManipulationCommentRotate>($$dpth,
            () => {
                let $scope$target: Nullable<CommentSelector>;
                let $scope$rotateDir: Nullable<ManipulationCommentRotate_$0>;
                let $$res: Nullable<ManipulationCommentRotate> = null;
                if (true
                    && this.regexAccept(String.raw`(?:rotate)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$target = this.matchCommentSelector($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rotateDir = this.matchManipulationCommentRotate_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ManipulationCommentRotate, target: $scope$target, rotateDir: $scope$rotateDir};
                }
                return $$res;
            });
    }
    public matchManipulationCommentRotate_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentRotate_$0> {
        return this.choice<ManipulationCommentRotate_$0>([
            () => this.matchManipulationCommentRotate_$0_1($$dpth + 1, $$cr),
            () => this.matchManipulationCommentRotate_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchManipulationCommentRotate_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentRotate_$0_1> {
        return this.regexAccept(String.raw`(?:downwards)`, $$dpth + 1, $$cr);
    }
    public matchManipulationCommentRotate_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ManipulationCommentRotate_$0_2> {
        return this.regexAccept(String.raw`(?:upwards)`, $$dpth + 1, $$cr);
    }
    public matchSetComment($$dpth: number, $$cr?: ErrorTracker): Nullable<SetComment> {
        return this.run<SetComment>($$dpth,
            () => {
                let $scope$target: Nullable<CommentSelector>;
                let $scope$value: Nullable<Expression>;
                let $$res: Nullable<SetComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:set )`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$target = this.matchCommentSelector($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:to)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SetComment, target: $scope$target, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchNavigations($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations> {
        return this.run<Navigations>($$dpth,
            () => {
                let $scope$navigations: Nullable<Navigations_$0[]>;
                let $$res: Nullable<Navigations> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$navigations = this.loop<Navigations_$0>(() => this.matchNavigations_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Navigations, navigations: $scope$navigations};
                }
                return $$res;
            });
    }
    public matchNavigations_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0> {
        return this.run<Navigations_$0>($$dpth,
            () => {
                let $scope$distance: Nullable<string>;
                let $scope$dir: Nullable<Navigations_$0_$0>;
                let $$res: Nullable<Navigations_$0> = null;
                if (true
                    && ($scope$distance = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$dir = this.matchNavigations_$0_$0($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Navigations_$0, distance: $scope$distance, dir: $scope$dir};
                }
                return $$res;
            });
    }
    public matchNavigations_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0_$0> {
        return this.choice<Navigations_$0_$0>([
            () => this.matchNavigations_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchNavigations_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchNavigations_$0_$0_3($$dpth + 1, $$cr),
            () => this.matchNavigations_$0_$0_4($$dpth + 1, $$cr),
        ]);
    }
    public matchNavigations_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0_$0_1> {
        return this.regexAccept(String.raw`(?:up)`, $$dpth + 1, $$cr);
    }
    public matchNavigations_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0_$0_2> {
        return this.regexAccept(String.raw`(?:down)`, $$dpth + 1, $$cr);
    }
    public matchNavigations_$0_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0_$0_3> {
        return this.regexAccept(String.raw`(?:left)`, $$dpth + 1, $$cr);
    }
    public matchNavigations_$0_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Navigations_$0_$0_4> {
        return this.regexAccept(String.raw`(?:right)`, $$dpth + 1, $$cr);
    }
    public matchCommentSelector($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector> {
        return this.run<CommentSelector>($$dpth,
            () => {
                let $scope$countSelector: Nullable<CommentSelector_$0>;
                let $scope$navigations: Nullable<Navigations>;
                let $$res: Nullable<CommentSelector> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:get)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$countSelector = this.matchCommentSelector_$0($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$navigations = this.matchNavigations($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CommentSelector, countSelector: $scope$countSelector, navigations: $scope$navigations};
                }
                return $$res;
            });
    }
    public matchCommentSelector_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0> {
        return this.choice<CommentSelector_$0>([
            () => this.matchCommentSelector_$0_1($$dpth + 1, $$cr),
            () => this.matchCommentSelector_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCommentSelector_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0_1> {
        return this.run<CommentSelector_$0_1>($$dpth,
            () => {
                let $scope$sth: Nullable<string>;
                let $$res: Nullable<CommentSelector_$0_1> = null;
                if (true
                    && ($scope$sth = this.regexAccept(String.raw`(?:comment)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CommentSelector_$0_1, sth: $scope$sth};
                }
                return $$res;
            });
    }
    public matchCommentSelector_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0_2> {
        return this.run<CommentSelector_$0_2>($$dpth,
            () => {
                let $scope$count: Nullable<string>;
                let $scope$aboveBelow: Nullable<CommentSelector_$0_$0>;
                let $$res: Nullable<CommentSelector_$0_2> = null;
                if (true
                    && ($scope$count = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:comments)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$aboveBelow = this.matchCommentSelector_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CommentSelector_$0_2, count: $scope$count, aboveBelow: $scope$aboveBelow};
                }
                return $$res;
            });
    }
    public matchCommentSelector_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0_$0> {
        return this.choice<CommentSelector_$0_$0>([
            () => this.matchCommentSelector_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchCommentSelector_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCommentSelector_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0_$0_1> {
        return this.regexAccept(String.raw`(?:above)`, $$dpth + 1, $$cr);
    }
    public matchCommentSelector_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentSelector_$0_$0_2> {
        return this.regexAccept(String.raw`(?:below)`, $$dpth + 1, $$cr);
    }
    public matchIfComment($$dpth: number, $$cr?: ErrorTracker): Nullable<IfComment> {
        return this.run<IfComment>($$dpth,
            () => {
                let $scope$condition: Nullable<Expression>;
                let $$res: Nullable<IfComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.IfComment, condition: $scope$condition};
                }
                return $$res;
            });
    }
    public matchVarName($$dpth: number, $$cr?: ErrorTracker): Nullable<VarName> {
        return this.regexAccept(String.raw`(?:[a-zA-Z]+[0-9a-zA-Z]*)`, $$dpth + 1, $$cr);
    }
    public matchExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression> {
        return this.matchLogicalExpression($$dpth + 1, $$cr);
    }
    public matchLogicalExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicalExpression> {
        const fn = () => {
            return this.choice<LogicalExpression>([
                () => this.matchLogicalExpression_1($$dpth + 1, $$cr),
                () => this.matchLogicalExpression_2($$dpth + 1, $$cr),
                () => this.matchLogicalExpression_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$LogicalExpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$LogicalExpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<LogicalExpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$LogicalExpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchLogicalExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicalExpression_1> {
        return this.matchEqualsExpression($$dpth + 1, $$cr);
    }
    public matchLogicalExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicalExpression_2> {
        return this.matchNotEqualsExpression($$dpth + 1, $$cr);
    }
    public matchLogicalExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicalExpression_3> {
        return this.matchComparisionExpression($$dpth + 1, $$cr);
    }
    public matchEqualsExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<EqualsExpression> {
        return this.run<EqualsExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<LogicalExpression>;
                let $scope$rhs: Nullable<ComparisionExpression>;
                let $$res: Nullable<EqualsExpression> = null;
                if (true
                    && ($scope$lhs = this.matchLogicalExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:==)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.EqualsExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchNotEqualsExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<NotEqualsExpression> {
        return this.run<NotEqualsExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<LogicalExpression>;
                let $scope$rhs: Nullable<ComparisionExpression>;
                let $$res: Nullable<NotEqualsExpression> = null;
                if (true
                    && ($scope$lhs = this.matchLogicalExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NotEqualsExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchComparisionExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression> {
        const fn = () => {
            return this.choice<ComparisionExpression>([
                () => this.matchComparisionExpression_1($$dpth + 1, $$cr),
                () => this.matchComparisionExpression_2($$dpth + 1, $$cr),
                () => this.matchComparisionExpression_3($$dpth + 1, $$cr),
                () => this.matchComparisionExpression_4($$dpth + 1, $$cr),
                () => this.matchComparisionExpression_5($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$ComparisionExpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$ComparisionExpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<ComparisionExpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$ComparisionExpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchComparisionExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression_1> {
        return this.matchLessThanExpression($$dpth + 1, $$cr);
    }
    public matchComparisionExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression_2> {
        return this.matchMoreThanExpression($$dpth + 1, $$cr);
    }
    public matchComparisionExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression_3> {
        return this.matchLessEqualExpression($$dpth + 1, $$cr);
    }
    public matchComparisionExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression_4> {
        return this.matchMoreEqualExpression($$dpth + 1, $$cr);
    }
    public matchComparisionExpression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparisionExpression_5> {
        return this.matchLineExpression($$dpth + 1, $$cr);
    }
    public matchLessThanExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<LessThanExpression> {
        return this.run<LessThanExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<ComparisionExpression>;
                let $scope$rhs: Nullable<LineExpression>;
                let $$res: Nullable<LessThanExpression> = null;
                if (true
                    && ($scope$lhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.LessThanExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchMoreThanExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<MoreThanExpression> {
        return this.run<MoreThanExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<ComparisionExpression>;
                let $scope$rhs: Nullable<LineExpression>;
                let $$res: Nullable<MoreThanExpression> = null;
                if (true
                    && ($scope$lhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MoreThanExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchLessEqualExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<LessEqualExpression> {
        return this.run<LessEqualExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<ComparisionExpression>;
                let $scope$rhs: Nullable<LineExpression>;
                let $$res: Nullable<LessEqualExpression> = null;
                if (true
                    && ($scope$lhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.LessEqualExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchMoreEqualExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<MoreEqualExpression> {
        return this.run<MoreEqualExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<ComparisionExpression>;
                let $scope$rhs: Nullable<LineExpression>;
                let $$res: Nullable<MoreEqualExpression> = null;
                if (true
                    && ($scope$lhs = this.matchComparisionExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MoreEqualExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchLineExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<LineExpression> {
        const fn = () => {
            return this.choice<LineExpression>([
                () => this.matchLineExpression_1($$dpth + 1, $$cr),
                () => this.matchLineExpression_2($$dpth + 1, $$cr),
                () => this.matchLineExpression_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$LineExpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$LineExpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<LineExpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$LineExpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchLineExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<LineExpression_1> {
        return this.matchAddExpression($$dpth + 1, $$cr);
    }
    public matchLineExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<LineExpression_2> {
        return this.matchSubExpression($$dpth + 1, $$cr);
    }
    public matchLineExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<LineExpression_3> {
        return this.matchDotExpression($$dpth + 1, $$cr);
    }
    public matchAddExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<AddExpression> {
        return this.run<AddExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<LineExpression>;
                let $scope$rhs: Nullable<DotExpression>;
                let $$res: Nullable<AddExpression> = null;
                if (true
                    && ($scope$lhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchDotExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AddExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchSubExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<SubExpression> {
        return this.run<SubExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<LineExpression>;
                let $scope$rhs: Nullable<DotExpression>;
                let $$res: Nullable<SubExpression> = null;
                if (true
                    && ($scope$lhs = this.matchLineExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchDotExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SubExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchDotExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<DotExpression> {
        const fn = () => {
            return this.choice<DotExpression>([
                () => this.matchDotExpression_1($$dpth + 1, $$cr),
                () => this.matchDotExpression_2($$dpth + 1, $$cr),
                () => this.matchDotExpression_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$DotExpression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$DotExpression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<DotExpression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$DotExpression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchDotExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DotExpression_1> {
        return this.matchMulExpression($$dpth + 1, $$cr);
    }
    public matchDotExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DotExpression_2> {
        return this.matchDivExpression($$dpth + 1, $$cr);
    }
    public matchDotExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<DotExpression_3> {
        return this.matchPrefixExpression($$dpth + 1, $$cr);
    }
    public matchMulExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<MulExpression> {
        return this.run<MulExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<DotExpression>;
                let $scope$rhs: Nullable<PrefixExpression>;
                let $$res: Nullable<MulExpression> = null;
                if (true
                    && ($scope$lhs = this.matchDotExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchPrefixExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MulExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchDivExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<DivExpression> {
        return this.run<DivExpression>($$dpth,
            () => {
                let $scope$lhs: Nullable<DotExpression>;
                let $scope$rhs: Nullable<PrefixExpression>;
                let $$res: Nullable<DivExpression> = null;
                if (true
                    && ($scope$lhs = this.matchDotExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchPrefixExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.DivExpression, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchPrefixExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<PrefixExpression> {
        return this.choice<PrefixExpression>([
            () => this.matchPrefixExpression_1($$dpth + 1, $$cr),
            () => this.matchPrefixExpression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchPrefixExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PrefixExpression_1> {
        return this.matchEvalExpression($$dpth + 1, $$cr);
    }
    public matchPrefixExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PrefixExpression_2> {
        return this.matchPostfixExpression($$dpth + 1, $$cr);
    }
    public matchEvalExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<EvalExpression> {
        return this.run<EvalExpression>($$dpth,
            () => {
                let $scope$toEval: Nullable<PostfixExpression>;
                let $$res: Nullable<EvalExpression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\$)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$toEval = this.matchPostfixExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.EvalExpression, toEval: $scope$toEval};
                }
                return $$res;
            });
    }
    public matchPostfixExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<PostfixExpression> {
        return this.choice<PostfixExpression>([
            () => this.matchPostfixExpression_1($$dpth + 1, $$cr),
            () => this.matchPostfixExpression_2($$dpth + 1, $$cr),
            () => this.matchPostfixExpression_3($$dpth + 1, $$cr),
            () => this.matchPostfixExpression_4($$dpth + 1, $$cr),
        ]);
    }
    public matchPostfixExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PostfixExpression_1> {
        return this.matchFunctionCall($$dpth + 1, $$cr);
    }
    public matchPostfixExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PostfixExpression_2> {
        return this.matchGetLengthExpression($$dpth + 1, $$cr);
    }
    public matchPostfixExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<PostfixExpression_3> {
        return this.matchIndexExpression($$dpth + 1, $$cr);
    }
    public matchPostfixExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<PostfixExpression_4> {
        return this.matchAtomicExpression($$dpth + 1, $$cr);
    }
    public matchFunctionParameters($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionParameters> {
        return this.run<FunctionParameters>($$dpth,
            () => {
                let $scope$value: Nullable<Expression>;
                let $scope$next: Nullable<Nullable<FunctionParameters_$0>>;
                let $$res: Nullable<FunctionParameters> = null;
                if (true
                    && ($scope$value = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$next = this.matchFunctionParameters_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.FunctionParameters, value: $scope$value, next: $scope$next};
                }
                return $$res;
            });
    }
    public matchFunctionParameters_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionParameters_$0> {
        return this.run<FunctionParameters_$0>($$dpth,
            () => {
                let $scope$nextParam: Nullable<FunctionParameters>;
                let $$res: Nullable<FunctionParameters_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$nextParam = this.matchFunctionParameters($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FunctionParameters_$0, nextParam: $scope$nextParam};
                }
                return $$res;
            });
    }
    public matchFunctionCall($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionCall> {
        return this.run<FunctionCall>($$dpth,
            () => {
                let $scope$funcName: Nullable<AtomicExpression>;
                let $scope$params: Nullable<Nullable<FunctionParameters>>;
                let $$res: Nullable<FunctionCall> = null;
                if (true
                    && ($scope$funcName = this.matchAtomicExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$params = this.matchFunctionParameters($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.FunctionCall, funcName: $scope$funcName, params: $scope$params};
                }
                return $$res;
            });
    }
    public matchGetLengthExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<GetLengthExpression> {
        return this.run<GetLengthExpression>($$dpth,
            () => {
                let $scope$list: Nullable<AtomicExpression>;
                let $$res: Nullable<GetLengthExpression> = null;
                if (true
                    && ($scope$list = this.matchAtomicExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.length)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.GetLengthExpression, list: $scope$list};
                }
                return $$res;
            });
    }
    public matchIndexExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexExpression> {
        return this.run<IndexExpression>($$dpth,
            () => {
                let $scope$list: Nullable<AtomicExpression>;
                let $scope$index: Nullable<Expression>;
                let $$res: Nullable<IndexExpression> = null;
                if (true
                    && ($scope$list = this.matchAtomicExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.IndexExpression, list: $scope$list, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchAtomicExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression> {
        return this.choice<AtomicExpression>([
            () => this.matchAtomicExpression_1($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_2($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_3($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_4($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_5($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_6($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_7($$dpth + 1, $$cr),
            () => this.matchAtomicExpression_8($$dpth + 1, $$cr),
        ]);
    }
    public matchAtomicExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_1> {
        return this.run<AtomicExpression_1>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<AtomicExpression_1> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_2> {
        return this.run<AtomicExpression_2>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<AtomicExpression_2> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_3> {
        return this.run<AtomicExpression_3>($$dpth,
            () => {
                let $scope$varName: Nullable<VarName>;
                let $$res: Nullable<AtomicExpression_3> = null;
                if (true
                    && ($scope$varName = this.matchVarName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_3, varName: $scope$varName};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_4> {
        return this.run<AtomicExpression_4>($$dpth,
            () => {
                let $scope$num: Nullable<string>;
                let $$res: Nullable<AtomicExpression_4> = null;
                if (true
                    && ($scope$num = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_4, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_5> {
        return this.run<AtomicExpression_5>($$dpth,
            () => {
                let $scope$sub: Nullable<Expression>;
                let $$res: Nullable<AtomicExpression_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$sub = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_5, sub: $scope$sub};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_6($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_6> {
        return this.run<AtomicExpression_6>($$dpth,
            () => {
                let $scope$listParams: Nullable<Nullable<FunctionParameters>>;
                let $$res: Nullable<AtomicExpression_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && (($scope$listParams = this.matchFunctionParameters($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_6, listParams: $scope$listParams};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_7($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_7> {
        return this.matchCommentSelector($$dpth + 1, $$cr);
    }
    public matchAtomicExpression_8($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_8> {
        return this.run<AtomicExpression_8>($$dpth,
            () => {
                let $scope$str: Nullable<AtomicExpression_$0[]>;
                let $$res: Nullable<AtomicExpression_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                    && ($scope$str = this.loop<AtomicExpression_$0>(() => this.matchAtomicExpression_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_8, str: $scope$str};
                }
                return $$res;
            });
    }
    public matchAtomicExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<AtomicExpression_$0> {
        return this.run<AtomicExpression_$0>($$dpth,
            () => {
                let $scope$char: Nullable<string>;
                let $$res: Nullable<AtomicExpression_$0> = null;
                if (true
                    && this.negate(() => this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr)) !== null
                    && ($scope$char = this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AtomicExpression_$0, char: $scope$char};
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}